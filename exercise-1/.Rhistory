# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View('vehicles')
source('~/Desktop/info201/ch10-dplyr/exercise-1/exercise.R')
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- select(make)
source('~/Desktop/info201/ch10-dplyr/exercise-1/exercise.R')
install.packages("devtools")
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- select(make)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- select(vehicles, make)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- select(vehicles, make)
library(dplyr)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- select(vehicles, make)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
source('~/Desktop/info201/ch10-dplyr/exercise-1/exercise.R')
install.packages("dplyr")
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- select(vehicles, make)
v <- vehicles
load("vehicles")
data("vehicles")
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- vehicles$make
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
library(fueleconomy)
View(vehicles)
v <- vehicles
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
unique(manufacturers)
# Filter the data set for vehicles manufactured in 1997
cars_1997 <- vehicles[vehicles$year == '1997', ]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
order(vehicles, vehicles$hwy)
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
cars_1997 <- cars_1997[cars_1997$hwy == order(cars_1997, cars_1997$hwy), ]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
cars_1997 <- cars_1997[order(cars_1997, cars_1997$hwy), ]
# Filter the data set for vehicles manufactured in 1997
cars_1997 <- vehicles[vehicles$year == '1997', ]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
cars_1997 <- cars_1997[order(cars_1997$hwy), ]
?mutate
?mutate
??mutate
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
cars_1997 <- mutate(cars_1997, average = ave(cars_1997$cty + cars_1997$hwy))
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
cars_1997 <- mutate(cars_1997, average = ave(cars_1997$cty + cars_1997$hwy))
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
#cars_1997 <- mutate(cars_1997, average = ave(cars_1997$cty + cars_1997$hwy))
cars_1997$average <- ave(cars_1997$cty + cars_1997$hwy)
cars_1997
View(cars_1997)
# Filter the data set for vehicles manufactured in 1997
cars_1997 <- vehicles[vehicles$year == 1997, ]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
cars_1997 <- cars_1997[order(cars_1997$hwy), ]
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
#cars_1997 <- mutate(cars_1997, average = ave(cars_1997$cty + cars_1997$hwy))
cars_1997$average <- ave(cars_1997$cty + cars_1997$hwy)
unique(cars_1997$year)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_whell <- filter(vehicles, vehicles$class == 'Special Purpose Vehicle 2WD')
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_whell <- vehicles[, vehicles$class == "Special Purpose Vehicle 2WD"]
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_whell <- vehicles[vehicles$drive == "2-Wheel Drive" & vehicles$cty > 20, ]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_car <- two_whell$id[two_whell$hwy == min(two_whell$hwy), ]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_car <- two_whell$id[two_whell$hwy == min(two_whell$hwy)]
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
make_year_filter <- function(year_choice, make_choice) {
choose_car <- vehicles[vehicles$year == year_choice & vehicles$make == "make_choice", ]
choose_car$model[choose_car$hwy == min(choose_car$hwy)]
}
choose_car$model[choose_car$hwy == min(choose_car$hwy)]
choose_car <- vehicles[vehicles$year == year_choice & vehicles$make == "make_choice", ]
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
make_year_filter <- function(year_choice, make_choice) {
choose_car <- vehicles[vehicles$year == year_choice & vehicles$make == "make_choice", ]
choose_car$model[choose_car$hwy == min(choose_car$hwy)]
}
# What was the most efficient Honda model of 1995?
make_year_filter(1995, "Honda")
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
make_year_filter <- function(year_choice, make_choice) {
choose_car <- vehicles[vehicles$year == year_choice & vehicles$make == "make_choice", ]
great_car <- choose_car$model[choose_car$hwy == max(choose_car$hwy)]
return (great_car)
}
# What was the most efficient Honda model of 1995?
make_year_filter(1995, "Honda")
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
make_year_filter <- function(year_choice, make_choice) {
choose_car <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice, ]
great_car <- choose_car$model[choose_car$hwy == max(choose_car$hwy)]
return (great_car)
}
choose_car <- vehicles[vehicles$year == "1995" & vehicles$make == Honda, ]
> choose_car <- vehicles[vehicles$year == "1995" & vehicles$make == 'Honda', ]
choose_car <- vehicles[vehicles$year == "1995" & vehicles$make == 'Honda', ]
choose_car$model[choose_car$hwy == max(choose_car$hwy)]
# What was the most efficient Honda model of 1995?
make_year_filter(1995, 'Honda')
# Install and load the "fueleconomy" package
#install.packages("devtools")
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
# Install and load the "dplyr" library
install.packages("dplyr")
load(dplyr)
library(dplyr)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufaturers <- select(vehicles, vehicles$make)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufaturers <- select(vehicles, vehicles.make)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufaturers <- select(vehicles, make)
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
num_manufa <- distinct(manufacturers)
num_manufa
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
num_manufa <- length(distinct(manufacturers))
num_manufa
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
num_manufa <- nrow(distinct(manufacturers))
# Filter the data set for vehicles manufactured in 1997
filter(vehicles, year == 1997)
# Arrange the 1997 cars by highway (`hwy`) gas milage
cars_1997 = arrange(cars_1997, hwy)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
cars_1997 <- mutate(cars_1997, average = ave(hwy + cty))
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_wheel <- filter(vehicles, drive == '2-Wheel-Drive', cty > 20)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_vehicle <- select(two_wheel, filter(two_wheel, hwy == min(hwy)))
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_vehicle <- filter(two_wheel, hwy == min(hwy))
worst_car <- select(filtered, id)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filtered <- filter(two_wheel, hwy == min(hwy))
worst_car <- select(filtered, id)
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
make_year_filter <- function(year_choice, make_choice) {
filtered_car <- filter(vehicles, year == year_choice, make == make_choice)
return select(filtered_car, id)
}
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
make_year_filter <- function(year_choice, make_choice) {
filtered_car <- filter(vehicles, year == year_choice, make == make_choice)
return select(filtered_car, id)
}
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
make_year_filter <- function(year_choice, make_choice) {
filtered_car <- filter(vehicles, year == year_choice, make == make_choice)
select(filtered_car, id)
}
# What was the most efficient Honda model of 1995?
make_year_filter(1995, 'Honda')
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
make_year_filter <- function(year_choice, make_choice) {
filtered_car <- filter(vehicles, year == year_choice, make == make_choice)
max_hwy <- filter(filtered_car, hwy == max(hwy))
select(filtered_car, model)
}
# What was the most efficient Honda model of 1995?
make_year_filter(1995, 'Honda')
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
make_year_filter <- function(year_choice, make_choice) {
filtered_car <- filter(vehicles, year == year_choice, make == make_choice)
max_hwy <- filter(filtered_car, hwy == max(hwy))
selected <- select(filtered_car, model)
selected
}
# What was the most efficient Honda model of 1995?
make_year_filter(1995, 'Honda')
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
make_year_filter <- function(year_choice, make_choice) {
filtered_car <- filter(vehicles, year == year_choice, make == make_choice)
max_hwy <- filter(filtered_car, hwy == max(hwy))
selected <- select(max_hwy, model)
selected
}
# What was the most efficient Honda model of 1995?
make_year_filter(1995, 'Honda')
